---
title: "Archive plots"
author:
- Josh DeClercq
date: today
format:
  html:
    grid: 
      body-width: 1250px
      sidebar-width: 250px
      margin-width: 200px
    toc: true
    mainfont: albertus
    theme: flatly
    html-table-processing: none
    fig-align: center
    fig-width: 8
    fig-height: 6
toc-location: left
toc-depth: 3
execute:
  echo: true
  eval: true
  warning: false
number-sections: true
monobackgroundcolor: "#EFF7EFDF"
code-fold: true
code-block-bg: "#EFF7EFDF"
code-block-border-left: "#BADBCB"
callout-appearance: minimal
self-contained: true
---


```{r setup, include=FALSE}
knitr::opts_chunk$set(echo = TRUE)

require(Hmisc)
require(rms)
require(ggplot2)
require(lubridate)
require(magrittr)
require(dplyr)
require(knitr)
require(kableExtra)
require(tidyr)
require(stringr)
require(forcats)
require(plotly)
require(gtsummary)
require(gt)
require(reactable)
require(reactablefmtr)
require(htmltools)

require(tibble)
require(glue)
require(purrr)
require(qreport)


devtools::source_url("https://raw.githubusercontent.com/jjdeclercq/VUMisC/refs/heads/main/JDmisc/JDmisc.R")

```




```{r}
#| eval: false
# Define a function to create a ggplot object with stored code
create_ggplot_with_code <- function(plot_code) {
  plot_expr <- substitute(plot_code)
  plot <- eval(plot_expr)
  
  plot_code_str <- paste(deparse(plot_expr, width.cutoff = 500), collapse = "\n")
  
  # Use styler to format the code string
  styled_code <- styler::style_text(plot_code_str)
  
  # Store the plot and code in a custom object, retaining the ggplot class
  structure(plot, code = styled_code, class = c("ggplot_with_code", class(plot)))
}

# Define a print method for the custom class to behave like a normal ggplot
print.ggplot_with_code <- function(x, ...) {
  # Print the ggplot object
  NextMethod("print", x)
}

# Define a function to save the plot and code
archive_plot <- function(ggplot_with_code_obj, plot_filename, code_filename) {
  ggsave(filename = plot_filename, plot = ggplot_with_code_obj)
  code <- attr(ggplot_with_code_obj, "code")
  writeLines(code, con = code_filename)
}

# Example usage
(plot_obj <- create_ggplot_with_code(
  d4 %>% select(1, adherence:patient_disease_activity) %>% pivot_longer(., -1) %>%
  label_pivoted(., d4) %>% count(label, value) %>%
  complete(label, value, fill = list(n = 0)) %>%
  mutate(st = 2 * n * (value == "Core") + n * (value == "Reach")) %>%
  group_by(label) %>% mutate(st = sum(st)) %>% ungroup() %>%
  mutate(label = fct_reorder(factor(label), st, max)) %>%
  ggplot(., aes(x = value, y = label, fill = n, label = n)) +
  geom_tile() +
  theme_minimal() +
  scale_fill_gradient(
    low = "#E7E8EC",
    high = "#123D78",
    space = "Lab",
    na.value = "grey50",
    guide = "colourbar",
    aesthetics = "fill"
  ) +
  guides(fill = FALSE) +
  geom_text(
    aes(color = after_scale(
      prismatic::best_contrast(fill, c("white", "black"))
    )),
    size = 3.5, show.legend = FALSE
  ) +
  labs(y = "Element", x = "Categorization") +
  guides(colour = FALSE)
))


# Archive the plot and code
archive_plot(plot_obj, "my_plot.png", "my_plot_code.txt")
```

```{r}
#| eval: false
# Define a function to create a ggplot object with stored, styled code
archive_plot <- function(plot_code, filename, location = NULL) {
  plot_expr <- substitute(plot_code)
  plot <- eval(plot_expr)
  
  # Convert the expression to a string with preserved formatting
  plot_code_str <- paste(deparse(plot_expr, width.cutoff = 500), collapse = "\n")
  
  # Use styler to format the code string
  styled_code <- styler::style_text(plot_code_str)
  
  structured_plot <- list(Plot = plot, Code = styled_code)
  
    if (!is.null(location)) {
    if (dir.exists(location)) {
      filename <- file.path(location, filename)
    } else {
      warning(paste("Directory does not exist:", location, "- saving to working directory."))
    }
  }
  saveRDS(structured_plot, file = filename)
  
  return(plot)
}


permute_gg_cols <- function(plot){
  
  vars <- extract_plot_vars(plot) %>% unlist() %>% unname()
  df_permuted <- as.data.frame(lapply(plot$data %>% select(any_of(vars)), function(column) sample(column)))
  df_permuted
}

permute_cols <- function(data, vars){

  df_permuted <- as.data.frame(lapply(data %>% select(any_of(vars)), function(column) sample(column)))
  df_permuted
}

# function(plot, vars){
#   # 
#   # vars <- extract_plot_vars(plot) %>% unlist() %>% unname()
#   df_permuted <- as.data.frame(lapply(plot$data %>% select(any_of(vars)), function(column) sample(column)))
#   df_permuted
# }

# unpack_plot <- function(filename) {
#   ggplot_with_code_obj <- readRDS(filename)
#   
#   # Display plot
#   print(ggplot_with_code_obj$Plot)
#   permute_gg_cols(ggplot_with_code_obj$Plot) %>% str() 
#   
#   return(list(Code = ggplot_with_code_obj$Code))
# }
```


```{r}
# archive_plot(plot_code = 
#     mtcars %>% 
#     ggplot(.,aes(x = mpg, y = disp, colour = factor(cyl))) + 
#     geom_point() +theme_minimal() +labs(x = "MPG", y = "DISP") +facet_grid(~gear),
#   filename = "test.rds")
# 
# unpack_plot("test.rds")
# prepper <- function(plot_code){
#   CODE <- substitute(plot_code)
#  glue::glue("archive_plot(
#                   {CODE},
#  
#             filename = '', 
#             location = NULL)")
# }
#  
# prepper(plot_code = 
#     mtcars %>% 
#     ggplot(.,aes(x = mpg, y = disp, colour = factor(cyl))) + 
#     geom_point() +theme_minimal() +labs(x = "MPG", y = "DISP") +facet_grid(~gear))
```


# Archiving plots

Goals:

  - Create a repository of plots as a reference guide or source of inspiration for others
  - Show code alongside plot
  - Include structure of data
  - Optional: permute/ mask data for sensitive plots
  - Easy to implement
  - Non-intrusive for existing code and reports
  - Scalable

```{r}
extract_plot_vars <- function(plot) {
  aes_vars <- lapply(plot$mapping, function(aes) {
    # Get the expression inside the aesthetic
    expr <- rlang::quo_get_expr(aes)
    
    # Check if expr is a symbol (e.g., mpg)
    if (rlang::is_symbol(expr)) {
      rlang::as_string(expr)
    } else if (rlang::is_call(expr)) {
      # If it's a call (e.g., factor(cyl)), get the variable within the transformation
      rlang::as_string(expr[[2]])
    } else {
      NA_character_
    }
  })
  
    facet_vars <- c()
  if (!is.null(plot$facet$params$rows)) {
    facet_vars <- c(facet_vars, names(plot$facet$params$rows))
  }
  if (!is.null(plot$facet$params$cols)) {
    facet_vars <- c(facet_vars, names(plot$facet$params$cols))
  }
  
  # Combine aesthetic and faceting variables
  c(aes_vars, facet_vars)
}


capture_code <- function(expr) {
  out <- eval(expr)  # Evaluate the plot expression
  out$Code <- substitute(expr)
  return(out)  # Return both the plot and the expression
}


archive_plot <- function(plot, filename, location = NULL, mask = FALSE) {
  
  plot_expr <- plot$Code
  # plot_expr <- substitute(plot_code)
  # plot <- eval(plot_expr)
  
  ## Only keep variables needed for plotting
  plot_vars <- extract_plot_vars(plot) %>% unlist() %>% unname()
  plot$data <-plot$data %>% select(all_of(plot_vars))
  
  ## Randomize data
  if(isTRUE(mask)){
    cat("All plotting data are randomized")
  plot$data <-plot$data %>% mutate(across(everything(), sample))
  } else if(length(intersect(mask, plot_vars))>0 ){
    cat(paste0("The following variables have been randomized: ", toString(mask)))
    plot$data <- plot$data %>% mutate(across(any_of(mask), sample))
  }
  
  # Convert the expression to a string with preserved formatting
  plot_code_str <- paste(deparse(plot_expr, width.cutoff = 500), collapse = "\n")
  
  # Use styler to format the code string
  styled_code <- styler::style_text(plot_code_str)
  
  # structured_plot <- list(Plot = plot, Code = styled_code)
  plot$Code <- styled_code
  
    if (!is.null(location)) {
    if (dir.exists(location)) {
      filename <- file.path(location, filename)
    } else {
      warning(paste("Directory does not exist:", location, "- saving to working directory."))
    }
  }
  saveRDS(plot, file = filename)
  
  return(plot)
}

unpack_plot <- function(filename) {
  ggplot_with_code_obj <- readRDS(filename)
  
  # Display plot
  print(ggplot_with_code_obj)
  
  cat("Data\n")
  str(ggplot_with_code_obj$data)
  
  return(list(Code = ggplot_with_code_obj$Code))
}
```

## Original plot
```{r}
pplot <- capture_code(mtcars %>% 
    ggplot(.,aes(x = mpg, y = disp, colour = factor(cyl))) + 
    geom_point() +theme_minimal() +labs(x = "MPG", y = "DISP") +
      facet_grid(~gear))

pplot
```

## Archive plot
```{r}
archive_plot(pplot,
  filename = "test.rds",
  mask = "disp")
```

## Unpacked plot
```{r}
unpack_plot("test.rds")
getwd()
```


## Discussion

  - Does the workflow make sense?
  - Tried and failed to get a prettier output of data structure and code. Originally wanted the Data and Code to be in auto-generated tabs. Other suggestions?
  - How to implement for a group? Github/ gitlab





# Alerts

::: {.callout-important}
Objective: dynamically create, update and log alerts within a markdown document
:::

Idea:

  - Function to create a blank alert
  - Function to format and print alerts for html report
  - Alerts should be easy to update and move around report
  - Log alerts, status, date, resolution, etc.
  - Formatted summary table
  - Alert tracker with summary of status checks
  
How to implement? 

  - Quarto extensions??
  
```{r}
# Alert
# @id 001
# @status alert
# @type caution
# @notes Data missing in section 2.
# @created 2025-01-03
# @resolved N/A
# @resolution Pending data collection.

# Alert
# @id 002
# @status alert
# @type caution
# @notes Final results pending futher discussion.
# @created 2025-01-03
# @resolved N/A
# @resolution Pending data collection.

# parse_alert_metadata("archive_plot.qmd")

```

```{r}
# Function to parse alert metadata
parse_alert_metadata <- function(file_path) {
  lines <- readLines(file_path)
  metadata <- list()
  current <- list()
  
  for (line in lines) {
    if (grepl("^# @", line)) {
      key_value <- strsplit(sub("^# @", "", line), "\\s+", fixed = TRUE)[[1]]
      current[[key_value[1]]] <- paste(key_value[-1], collapse = " ")
    } else if (grepl("^#", line) == FALSE && length(current) > 0) {
      # End of metadata block
      metadata <- append(metadata, list(current))
      current <- list()
    }
  }
  
  # Append the last block if it exists
  if (length(current) > 0) metadata <- append(metadata, list(current))
  
  # Convert to a data frame
  metadata_df <- do.call(rbind, lapply(metadata, as.data.frame))
  return(metadata_df)
}
```




```{r}

# parse_alert_metadata("archive_plot.qmd")

```



## Structure?
```{r}
#| eval: false
pplot <- mtcars %>% 
  ggplot(.,aes(x = mpg, y = disp, colour = factor(cyl))) + 
  geom_point() +theme_minimal() +labs(x = "MPG", y = "DISP") +facet_grid(~gear)

extract_plot_vars(pplot)
sty <- styler::style_text(substitute(mtcars %>% 
  ggplot(.,aes(x = mpg, y = disp, colour = factor(cyl))) + 
  geom_point() +theme_minimal() +labs(x = "MPG", y = "DISP") +
    labs(x = "something") +theme_minimal() +guides(fill = FALSE)
  ))


paste0(capture.output(str(pplot$data)), sep = "\n", collapse = "")
```


```{r}
#| eval: false

glue_sh <- function(..., .envir = parent.frame(), .type = c("sh", "csh", "cmd", "cmd2")) {
  .type <- match.arg(.type)
  glue(..., .envir = .envir, .transformer = shell_transformer(.type))

}

shell_transformer <- function(type = c("sh", "csh", "cmd", "cmd2")) {
  type <- match.arg(type)
  function(text, envir) {
    res <- identity_transformer(text, envir)
    shQuote(res)
  }
}
filename <- "test"
writeLines(con = filename, sty)

command <- glue_sh("cat {filename}")
command
#> cat 'test'
system(command)

filename <- "test"
writeLines(con = filename, capture.output(str(pplot$data)))

command <- glue_sh("cat {filename}")
command
#> cat 'test'
system(command)

X <- substitute(str(pplot$data))
eval(X)
```







## new
```{r}
#| eval: false
unpack_plot <- function(filename) {
  ggplot_with_code_obj <- readRDS(filename)
  
  # Display plot
  print(ggplot_with_code_obj$Plot)
  STR <- substitute(permute_gg_cols(ggplot_with_code_obj$Plot) %>% str() )
  
  return(list(Code = ggplot_with_code_obj$Code, Data = eval(STR)))
}

unpack_plot("test.rds")

pplot$data <-pplot$data %>% select(extract_plot_vars(pplot) %>% unlist() %>% unname())

pplot$call <- sty

str(pplot)
```






## pipeable
```{r}
#| eval: false
capture_plot_code <- function(plot_expr) {
  plot <- eval(plot_expr)  # Evaluate the plot expression
  plot$Code <- substitute(plot_expr)
  return(plot)  # Return both the plot and the expression
}


archive_plot <- function(plot_code, filename, location = NULL) {
  plot <- plot_code$Plot  # Extract the plot from the list
  plot_code_str <- paste(deparse(plot_code$Code, width.cutoff = 500), collapse = "\n")  # Extract the code as a string
  
  # Use styler to format the code string
  styled_code <- styler::style_text(plot_code_str)
  
  structured_plot <- list(Plot = plot, Code = styled_code)

  if (!is.null(location)) {
    if (dir.exists(location)) {
      filename <- file.path(location, filename)
    } else {
      warning(paste("Directory does not exist:", location, "- saving to working directory."))
    }
  }

  saveRDS(structured_plot, file = filename)

  return(plot)
}

   capture_plot_code(mtcars %>% 
    ggplot(.,aes(x = mpg, y = disp, colour = factor(cyl))) + 
    geom_point() +theme_minimal() +labs(x = "MPG", y = "DISP") +facet_grid(~gear))  %>% 
  archive_plot(plot_code = .,
  filename = "test.rds")
```






## y  
```{r}
#| eval: false
load_and_display_plot <- function(filename) {
  # Load the custom object
  ggplot_with_code_obj <- readRDS(filename)
  
  # Print the plot
  print(ggplot_with_code_obj)
  
  # Extract the code
  code <- attr(ggplot_with_code_obj, "code")
  
  # Write the code to a Quarto collapsible callout panel
  # qreport::makecallout(code, callout='.callout-note collapse=true', label='# Code to generate plot\n', type='print')
  # qreport::makecodechunk(code, opts = list(echo = TRUE, eval = FALSE))
    cat("``` \n\n```{r echo=TRUE, eval = FALSE}\n", code,"\n```\n" )
  # cat(code, "\n")
  # cat("```\n")
}

load_and_display_plot2 <- function(filename) {
  # Load the custom object
  ggplot_with_code_obj <- readRDS(filename)
  
  k <- c(ggplot_with_code_obj$Code)

cat(knitr::knit(text = k, quiet = TRUE))
  
return(ggplot_with_code_obj$Plot)

}

load_and_display_plot2("test.rds")
```


## y2 - sneak!
```{r}
#| eval: false
ggplot_with_code_obj <- readRDS("test.rds")

unpack_plot <- function(filename) {
  ggplot_with_code_obj <- readRDS(filename)
  
  # Display plot
  print(ggplot_with_code_obj$Plot)
  
  return(ggplot_with_code_obj$Code)
}


unpack_plot("test.rds") %>% cat(knitr::knit(text = ., quiet = TRUE))
```



## sneak
```{r}
#| eval: false
unpack_plot <- function(filename) {
  # Load the custom object
  ggplot_with_code_obj <- readRDS(filename)
  
  # Display plot
  print(ggplot_with_code_obj$Plot)
  
  # Return the code as a string
  return(ggplot_with_code_obj$Code)
}

# Run the function and capture the code
code_output <- unpack_plot("test.rds")

# Prepare the formatted code for printing
k <- c(code_output)

# Print the formatted code using knitr::knit
cat(knitr::knit(text = k, quiet = TRUE))

```

## w  
```{r}
#| eval: false
ggplot_with_code_obj <- readRDS("test.rds")
ggplot_with_code_obj <- readRDS("test.rds")
ggplot_with_code_obj$Plot
k <- c("```{r label_x, eval = FALSE, echo = TRUE}\n",ggplot_with_code_obj$Code,"\n```")

cat(knitr::knit(text = k, quiet = TRUE))
# x <- attr(ggplot_with_code_obj, "code")
# 
# y <- capture.output(cat(x))
```

## x
```{r}
#| eval: false
k <- c(ggplot_with_code_obj$Code)

cat(knitr::knit(text = k, quiet = TRUE))

```


## x 2
```{r}
#| eval: false
k <- c(ggplot_with_code_obj$Code)

cat(knitr::knit(text = k, quiet = TRUE))

```


## x23
```{r}
#| eval: false
k <- c(ggplot_with_code_obj$Code)
ggplot_with_code_obj$Plot
cat(knitr::knit(text = k, quiet = TRUE))
```

## x233
```{r}
#| eval: false
k <- c(ggplot_with_code_obj$Code)
jreport(list(Plot = ggplot_with_code_obj$Plot,
Code = capture.output(cat(knitr::knit(text = k, quiet = TRUE)))))
```

## x 3

```{r}
#| eval: false
#| results: asis
#| 
# Function to unpack and display the plot and formatted code
unpack_plot <- function(filename) {
  ggplot_with_code_obj <- readRDS(filename)
  
  # Display plot
  print(ggplot_with_code_obj$Plot)
  
  # Generate code in a collapsible callout for Quarto
  code_output <- paste(ggplot_with_code_obj$Code, collapse = "\n")
  callout <- paste0("::: {.callout-tip collapse='true'}\n\n",
                    "## Plot Code\n",
                    "```{r chunky_butt, echo = TRUE, eval = FALSE}\n",
                    code_output,
                    "\n```\n",
                    ":::\n")
  
  # Print callout (works in Quarto; for R Markdown, remove callout wrapper and set chunk options)
  # cat(knitr::knit(text = callout, quiet = TRUE))
  cat(callout)
}

unpack_plot("test.rds")

```

```{r}
#| eval: false
library(qreport)

# Function to unpack and display the plot and formatted code
unpack_plot <- function(filename) {
  ggplot_with_code_obj <- readRDS(filename)
  
  # Display plot
  print(ggplot_with_code_obj$Plot)
  
  # Prepare formatted code block
  code_output <- paste(ggplot_with_code_obj$Code, collapse = "\n")
  
  # Use qreport::make_callout to create a collapsible callout
  qreport::makecallout(
    x = paste0("```{r, echo=TRUE, eval=FALSE}\n", code_output, "\n```"),
    callout = ".callout-tip collapse='true'",
    label = "## Plot Code",
    type = "knit"  # Render directly as character output
  )
}

# Example usage
unpack_plot("test.rds")

```

