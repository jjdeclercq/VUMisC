---
title: "Alert Example"
crossref:
  custom:
    - kind: float
      reference-prefix: Alert
      key: ale
      caption-location: top
metadata-files: 
  - _alerts.yml
---

```{r}
#| echo: false
#| include: false


require(tidyverse)
require(gtsummary)
require(reactable)
require(reactablefmtr)

devtools::source_url("https://raw.githubusercontent.com/jjdeclercq/VUMisC/refs/heads/main/JDmisc/JDmisc.R")

```

# Section

## Heading?

::: {#ale-test}
{{< alert "test" >}}
:::

# Another section

{{< alert "test2" >}} 

::: {#ale-newa}
{{< alert "newa" >}}
:::

## subsection

::: {#ale-test3}
{{< alert "test3" >}}
:::

@ale-test 

::: {#tip-example2 .callout-tip collapse="true"}
## Cross-Referencing a Tip

Add an ID starting with `#tip-` to reference a tip.
:::

@tip-example2

```{r}
# require(tidyverse)
# parsermd::parse_rmd("example.qmd") |> as.data.frame() |> pull(ast) %>% parsermd::as_document() %>% print()
#     mutate(order = cumsum(type == "rmd_heading")) |> rowwise() |> 
#     mutate(x = ifelse(type == "rmd_chunk", paste0(parsermd::as_document(ast), collapse = ""), "")) 
```

```{r}
add_alert <- function(alert_name = NULL) {
  # Load required libraries
  if (!requireNamespace("yaml", quietly = TRUE)) {
    stop("Package 'yaml' is required but not installed.")
  }
  if (!requireNamespace("rstudioapi", quietly = TRUE)) {
    stop("Package 'rstudioapi' is required but not installed.")
  }
  
  yaml_file <- "_alerts.yml"
  
  # Default template for an alert (all values blank or set to default)
  default_alert <- list(
    title = "",
    type = "",
    content = "",
    icon = TRUE,
    collapse = FALSE,
    date_created = "",
    resolved = FALSE,
    date_resolved = "",
    resolution = ""
  )
  
  if (!file.exists(yaml_file)) {
    # File does not exist: Create one with a single template alert.
    if (is.null(alert_name)) {
      new_alert_name <- "alert001"
    } else {
      new_alert_name <- alert_name
    }
    alerts_data <- list(alerts_list = list())
    alerts_data$alerts_list[[new_alert_name]] <- default_alert
    
    # Write the new YAML file
    yaml::write_yaml(alerts_data, yaml_file)
  } else {
    # File exists: Read existing YAML data
    alerts_data <- yaml::read_yaml(yaml_file)
    # Ensure alerts_list exists
    if (is.null(alerts_data$alerts_list)) {
      alerts_data$alerts_list <- list()
    }
    # Count the existing alerts (irrespective of their names)
    n <- length(alerts_data$alerts_list)
    if (is.null(alert_name)) {
      new_alert_name <- paste0("alert", sprintf("%03d", n + 1))
    } else {
      new_alert_name <- alert_name
    }
    # Append the new blank alert at the bottom
    alerts_data$alerts_list[[new_alert_name]] <- default_alert
    # Write the updated YAML back to file
    yaml::write_yaml(alerts_data, yaml_file)
  }
  
  # Open the file in RStudio (if available)
  if (rstudioapi::isAvailable()) {
    rstudioapi::documentOpen(normalizePath(yaml_file))
  } else {
    message("RStudio API not available; please open ", yaml_file, " manually.")
  }
 
  
cat(paste0("To display this alert in your document, copy and paste the following shortcode into your text editor:\n\n{{< alert '", new_alert_name, "' >}}"))

}

# add_alert()
```

```{r}



read_alerts_df <- function(yaml_file = "_alerts.yml") {
  # Load required packages (install if necessary)
  if (!requireNamespace("yaml", quietly = TRUE)) {
    stop("Package 'yaml' is required but not installed.")
  }
  if (!requireNamespace("purrr", quietly = TRUE)) {
    stop("Package 'purrr' is required but not installed.")
  }
  if (!requireNamespace("tibble", quietly = TRUE)) {
    stop("Package 'tibble' is required but not installed.")
  }
  
  # Read the YAML file
  alerts_data <- yaml::read_yaml(yaml_file)
  
  # Extract the alerts_list
  alerts_list <- alerts_data$alerts_list
  
  # Convert the alerts_list to a dataframe
  # Each alert becomes a row; missing fields will become NA
  df <- purrr::map_df(names(alerts_list), function(alert_id) {
    alert <- alerts_list[[alert_id]]
    alert$id <- alert_id  # add an id column from the key
    tibble::as_tibble(alert)
  })
  
  # Optional: reorder columns to have 'id' first
  df <- df[, c("id", setdiff(names(df), "id"))]
  
  return(df)
}

grep_alerts <- function(input_string){

    pattern <- "\\{\\{<\\s*alert\\s+([^ >]+)\\s*>\\}\\}"
    matches <- str_match_all(input_string, pattern)[[1]]
    alert_names <- matches[,2]
    alert_names
}

# Example usage:
alerts_df <- read_alerts_df("_alerts.yml")
# alerts_df %>% select(id, title, content ,resolved, date_created, date_resolved) %>% 
#   mutate(link = paste0("@ale-",id))%>% 
#   j.reactable(., columns = list(link = colDef(html = TRUE)), pagination = FALSE, height = 500)



parsermd::parse_rmd("example.qmd") %>%as.data.frame() %>% 
    mutate(order = cumsum(type == "rmd_heading")) %>% rowwise() %>% 
    mutate(x = ifelse(type == "rmd_markdown", paste0(parsermd::as_document(ast), collapse = ""), "")) %>% 
  mutate(has_alert = grepl("\\{\\{< alert", x)) %>% 
    mutate(y = "") %>% 
    filter(order >0, has_alert) %>% 
  left_join(., get_toc("example.qmd"), by= "order") %>% 
  mutate(x = gsub('\\"', "", x)) %>% 
  mutate(id =toString(grep_alerts(x))) %>% 
  separate_rows(., "id", sep = ",") %>% mutate(id= trimws(id)) %>% ungroup() %>% select(-title, -type) %>%  
  left_join(alerts_df, ., by = "id") %>% 
    mutate(section = case_when(is.na(section) ~ "Not included", 
                              !grepl("#ale", x) ~ glue::glue('ยง{section}'),
                              TRUE ~ glue::glue('<a href="#ale-{id}" class="quarto-xref" aria-expanded="false">ยง{section}</a>') )) %>% 
  select(id, title, content ,resolved, date_created, date_resolved,  section) %>% 
  j.reactable(., columns = list(section = colDef(html = TRUE)), pagination = FALSE, height = 500)


```


